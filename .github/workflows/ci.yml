name: CI
on: # отрабатывает только при пул реквесте в ветку develop
  pull_request:
    branches:
      - develop
      - master
  push:
    branches:
      - develop
      - master
jobs:
  build: # название джобы
    runs-on: ubuntu-latest # запускаем на последней убунте
    steps:
      - uses: actions/checkout@v2 # используя этот репозитарий выполнить шаг ниже
      - name: Cache node_modules
        uses: actions/cache@v1 # экшн для работы с кешем
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }} # ключ для записи и поиска кеша. Привязали его к Хешу по все файлам package и к типу ОС, если хоть один изменится, то кешь сохранится в другой записи
          restore-keys:
            | # если не будет найдено ни одного старого кеша с полным название, то можно попробовать искать по укороченному названию
            ${{ runner.os }}-node-
      - name: Use NodeJS
        uses: actions/setup-node@v1 # установить нужную верисию ноды
        with:
          node-version: "12.x"
      - run: npm ci # альтернатива npm install ( устанавливает зависимости, но без изменения package-json.lock)
      - run: npm run format # запускаем скрипт из package.json для линтера
      - run: npm test -- --coverage # запускаем скрипт из package.json для создания отчета по покрытию кода
        env:
          CI: true # и передаем в него статус CI
      - name: Upload Test Coverage # Сохраняем рез-ты проверки покрытия как артифакт
        uses: actions/upload-artifact@v1 # используем эту библиотеку
        with:
          name: code-coverage # задаем название артифакта
          path: coverage # путь к папке, которую нужно сохранить
      - name: Build Project # если это пушь, то собираем наш проект в папку build
        if: github.event_name == 'push'
        run: npm run build
      - name: Upload Build Folder # после мержа на так же надо сохранить артифакты( билд нашего сайта)
        if: github.event_name == 'push'
        uses: actions/upload-artifact@v1
        with:
          name: build
          path: build
      - name: Zip Assets
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: |
          zip -r build.zip ./build
          zip -r coverage.zip ./coverage
      - name: Create Release # создать новую заметку о релизе
        if: github.event_name == 'push' && github.ref == 'refs/heads/master' # создаем новый релиз только если это пуш в мастер
        run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Deploy to Staging # если это пушь, то деплоим проект на соот-щий домен
        if: github.event_name == 'push'
        run: npx surge --project ./build --domain amused-kittens.surge.sh
        env:
          SURGE_LOGIN: ${{secrets.SURGE_LOGIN}} # ключи для доступа к деплою сохраняем в секретах репозитория
          SURGE_TOKEN: ${{secrets.SURGE_TOKEN}}
